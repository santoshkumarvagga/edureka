Basic linux command cheat sheet: https://opensource.com/sites/default/files/gated-content/cheat_sheet_linux_common_commands.pdf

Pre-requisite : Java should be pre-installed. 
Java installation commands: 

sudo apt install default-jre              # version 2:1.11-72, or
sudo apt install openjdk-11-jre-headless  # version 11.0.7+10-3ubuntu1
sudo apt install openjdk-13-jre-headless  # version 13.0.3+3-1ubuntu2
sudo apt install openjdk-14-jre-headless  # version 14.0.1+7-1ubuntu1
sudo apt install openjdk-8-jre-headless   # version 8u252-b09-1ubuntu1

Installation on diff os/platforms: https://www.jenkins.io/doc/book/installing/

on ubuntu : 

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

start jenkins: sudo systemctl jenkins start
check status of jenkins: sudo systemctl status jenkins

see jenkins working at default http port : 8080 (i,e. https://localhost:8080)
we can chnage/configure settings of jenkins in /etc/default/jenkins

uninstall jenkins:
stop jenkins: sudo systemctl jenkins stop
uninstall jenkins: sudo apt-get remove --purge jenkins

restart jenkins:
sudo systemctl jenkins restart

in path /etc/default/jenkins., https://opensource.com/sites/default/files/gated-content/cheat_sheet_linux_common_commands.pdf
we can 
add jenkins to firewall exception, if firewall is on.
change port number.

to disable firewall : sudo ufw disable
to enable firewall: sudo ufw enable
to include a connection to port as exception under firewall, : sudo ufw allow 8080

username : admin
password: santosh96
port: 8082

jenins data directory(JENKINS_HOME): /var/lib/jenkins (it should not be full)

To enable email service after every build - https://nozaki.me/roller/kyle/entry/articles-jenkins-email

Jenkins: 
* Java application - hence platform independent.
* Used for CI/CD - Continous Integration and Continous Delivery.

* Continous Integration - As soon as developers commit their code to a shared repository, jenkins wioll take that latest code and trigers a build  for it. Build Notification is sent via email for respective developers saying the status and log of the build.
The advantage of this process is in a multideveloper environemnt, suppose if a commit has a bug in build, then build notification says that build has failed with ots logs. So that, developers can just revoke that commit and re work on part of code to fix the bug. Hence it resolves the issue of which developer has implanted bug in shared code, which part of code has been failed.

* Continuous Delivery - If build is succesfull with result as build artifacts(like website, app, exe), then Jenkins will perform some Testing over this successful build artifacts, like Unit testing, User-Acceptance testing and Performance Testing. If all tests are successfull, it will deploy the tested build artifact to Live production environment. If all this goes well, it will notify as Buils Success in Build Notification. Else notifies build failed at that point of bug with logs.

* Automated Deployment - Process of automating deployment process in a continuous delivery system. i,e. BUILD -> DEPLOY -> TEST -> RELEASE
i,e. Once Jenkins Polls the changes from VCS(like git), it will build it. The result will be Project artifacts(like .war files). These Artifacts are later Deployed for Testing Environment and then tested for various tests like Functional testing, Performance testing.Once these tests are successfull, We then Deploy the Original artifacts to Production server(Release step).
Here, We deployed artifacts two times(one for testing and one for Production server).

Plugin needed for Automated Deploymnt - "Deploy to container"
This Plugin takes a war file and deploys it to a running remote applications server like Tomcat or Glassfish.

During setting up a new job, we have to select Post build action as Deploy war/ear file to a container option. 
Here, we have to specify war file name/patterns to look up in our workspace directory.

This entire process is automated one.

Setting up Jenkins on Tomcat:
Jenkins can be run on a standalone server(Local PC), but since many web apps run on a single common server, it is better if we have jenkins too there. One such Server is Tomcat.
Once Tomcat installed, its http port by default will be 8080, same as Jenkins. So change Jenkins port (java -jar jenkins.war --httpPort=9090)
Any job setup on tomcat jenkins(localhost:8080/jenkins) or standalone jenkins(localhost:9090), will be synced in one another interface.

Changing jenkins home directory: Since jenkins by default will be installed in users's profile, which has other important files. If number of jobs, Plugins, Logs, configuration increase so that this drive space could become criticall to manage later.
Hence it is suggested to change home folder of jenkins other than in default user profile. For this, just create a new folder in some location, and copy all files in .jenkins folder to this new folder. then change the jenkins home folder path in localhost:9090/systeminfo
and this updated path will appear on top row of Manage Jenkins Page. In ubuntu, add path(export path=----) in .bash_profile file in order to set path permanently.

Building Jenkins Pipeline - https://opensource.com/article/19/9/intro-building-cicd-pipelines-jenkins

To access jenkins commands cli reference - localhost:8080/cli

To setup a Delivery pipeline: 
1) chain required jobs: with upstream and downstream jobs
2) install "delivery pipeline plugin"
3) Create a new view from jenkins dashboard, view type - Delivery pipeline view.
4) Go to Pipeline section - give initial job name in chained jobs. and OK.
5) Go for Edit view for options to a view.(like to see total buils time, to run some builds manually.etc)

To setup a Build pipeline:
1) chain required jobs: with upstream and downstream jobs
2) Install "Build Pipeline Plugin"
3) Create a new view from jenkins dashboard, view type - Build pipeline view
4) Go to Pipeline section - give initial job name in chained jobs. and OK.

CATLIGHT - application that notifies status of each build to developers by sitting at one end of their screen.

Blue Ocean - New user interface for jenkins and provides an interacive view for jenkins pipeline.(jenkins ver 2.7+)
Install Blue Ocean Plugin. Restart jenkins. see OPEN Blue Ocean menu.
To check version of jenkins, see at bottom right corner of the jenkins screen.

Triggering build via email - needs Plugin : Poll Mailbox trigger. set this option while adding job.

Build Monitor View - Provides highly visible status view of jobs. needs plugin - "Build Monitor View". We can select jobs for this view.

Aborting a standalone build: by clicking [x] icon from the UI.
Aborting a Pipeline build:
  Pipeline jobs can by stopped by sending an HTTP POST request to URL endpoints of a build.
- BUILD ID URL/stop - aborts a Pipeline.
- BUILD ID URL/term - forcibly terminates a build (should only be used if stop does not work).
- BUILD ID URL/kill - hard kill a pipeline. This is the most destructive way to stop a pipeline and should only be used as a last resort.
If your build isnâ€™t aborting-  http://yourserver/jenkins/threadDump

More on Pipeline:
* Jenkins Pipeline - Jenkins Pipeline is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.
* To use Jenkins Pipeline, you will need:
    - Jenkins 2.x or later
    - Pipeline plugin (installed as part of suggested plugins while initial jenkins setup)
    - 


Sample Pipeline Script:

pipeline {
  agent any
  stages {
    stage('Stage 1') {
      steps {
        echo 'Hello world!'
      }
    }
  }
  post{
		always{
			echo 'executed at any cost'
		}
		success{
			echo 'exceuted only on success'
		}
		failure{
			echo 'executed only if failed'
		}
		unstable{
			echo 'executed only if some of the tests are broken in the build'
		}
		changed{
			echo 'executed only if state of the pipeline has changed'
			echo 'like, if build is failing in last attempt, but now is success'
		}
	}
}
